#!/bin/bash
set -u -e -C
shopt -s failglob

function err { echo $'\e[1;31m'"$@"$'\e[m' >&2; exit 1; }
function warn { echo $'\e[1;35m'"$@"$'\e[m' >&2; }
function info { echo $'\e[36m'"$@"$'\e[m'; }

function ask_yN {
    local answer=''
    read -n 1 -s -p $'\e[34m'"$* [yN]"$'\e[m' answer
    if test "${answer}" = y; then
        info yes
        return 0
    fi
    info no
    return 1
}



if test -z "${1-}"; then
    info 'Listing installed metapackages:'
    if ! pacman -Q | grep -E '^metapkg_'; then
        echo '(none)'
    fi
    exit
fi

debug=false
if test "${1-}" = -d; then
    debug=true;
    shift
fi

if test -z "${1-}"; then
    err 'Need a metapackage description'
fi

name="${1}"



# read dependencies from file

if
    grep -Evx \
        '#.*|[a-z0-9@_+][a-z0-9@._+-]*(>[0-9.]*)?(<[0-9.]*)?' \
        "${name}"
then
    err 'Invalid lines in given file'
fi

mapfile -t depends < <(grep -Ev '^#' "${name}" | sort -u)

if test "${#depends[@]}" -lt 1; then
    err 'No dependencies listed in file'
fi

if "${debug}"; then
    info 'List of dependencies'
    printf "%s\n" "${depends[@]}"
fi



version="$(date '+%Y%m%d%H%M%S' -d@"$(stat -c%Y "${name}")")"
release="$(date '+%Y%m%d%H%M%S')"
packager="$(stat "${name}" -c '%U:%G')"

tmp="$(mktemp -t -d metapkg.XXXXXXXX)"
pkg="${tmp}/metapkg_${name}-${version}-${release}-any.pkg"



info "Creating package"

mkdir "${pkg}"

if "${debug}"; then
    echo "${tmp}"
    basename "${pkg}"
fi


### Package construction

# .PKGINFO
{

    cat <<.
pkgname = metapkg_${name}
pkgbase = metapkg_${name}
xdata = pkgtype=pkg
pkgver = ${version}-${release}
pkgdesc = Dependencies for ${name}
url =
builddate = ${release}
packager = ${packager}
size = 0
arch = any
.

    # FIXME quoting rules in that file?
    printf 'depend = %s\n' "${depends[@]}"

} >"${pkg}/.PKGINFO"

if "${debug}"; then
    info 'Listing .PKGINFO'
    cat "${pkg}/.PKGINFO"
fi


# . MTREE

LANG=C bsdtar \
    -C "${pkg}" \
    -cnf - \
    --format=mtree \
    --options='!all,use-set,type,uid,gid,mode,time,size,sha256,link' \
    --null \
    .PKGINFO \
    | gzip -c -f -n > "${pkg}/.MTREE"

if "${debug}"; then
    info 'Listing pkg dir content'
    ls -lA "${pkg}"
fi


# Archive package

LANG=C bsdtar \
    -C "${pkg}" \
    -cnf - \
    --no-fflags --no-read-sparse --null \
    .MTREE .PKGINFO \
    | zstd > "${pkg}.tar.zst"

if "${debug}"; then
    info 'Listing pkg archive content'
    unzstd < "${pkg}.tar.zst" | bsdtar -tvf -
fi



info 'Installing package'

mapfile -t orphansPre < <(pacman -Qdtq)

if test "${#orphansPre[@]}" -gt 0; then
    warn "Found ${#orphansPre[@]} orphans on your system."
fi

if "${debug}"; then
    pacman -U "${pkg}.tar.zst"
else
    pacman --noconfirm -U "${pkg}.tar.zst"
fi


# Look for newly introduced (not: all) orphans

mapfile -t orphansNew < <(
    comm -13 <(printf '%s\n' "${orphansPre[@]}") <(pacman -Qdtq)
)

if test "${#orphansNew[@]}" -gt 0; then
    warn 'This change newly orphaned a few packages'
    pacman -Rsn "${orphansNew[@]}" || true
fi


# remove temporary directory
if "${debug}"; then
    warn "Keeping: ${tmp}"
else
    rm -rf "${tmp}"
fi


info 'Done.  Some final remarks:'
cat <<.
Find orphans:          pacman -Qdtq
Update metapackage:    metapkg ${name}
Uninstall metapackage: pacman -Rsn metapkg_${name}
.

