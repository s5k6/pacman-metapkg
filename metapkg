#!/bin/bash
# Copyright 2024 Stefan Klinger <http://stefan-klinger.de>
set -u -e -C -o pipefail
shopt -s failglob

function err { echo $'\e[1;31m'"$@"$'\e[m' >&2; exit 1; }
function warn { echo $'\e[1;35m'"$@"$'\e[m' >&2; }
function info { echo $'\e[36m'"$@"$'\e[m'; }

function ask_yN {
    local answer=''
    read -n 1 -s -p $'\e[34m'"$* [yN]"$'\e[m' answer
    if test "${answer}" = y; then
        info yes
        return 0
    fi
    info no
    return 1
}



if test -z "${1-}"; then
    cat <<'.'

metapkg [-k] path/to/name

    Install or update metapackage `metapkg_name` created from
    dependencies listed in file `name`.

    If `-k` is provided, print diagnostics and keep temporary files.

Warning: See pacman(8), as the following hints may be outdated...

pacman -Qsq '^metapkg_'     # List installed metapackages.
pacman -Rs metapkg_name     # Remove package and unneeded dependencies.
pacman -Qdtq                # List orphaned packages.
pacman -Dq (--asdeps|--asexplicit) pkg...    # Set installation reason.

.
    exit
fi



debug=false


while test "${1:0:1}" = -; do

    if test "${1-}" = -k; then
        debug=true;
        shift
    else
        err "Invalid argument: ${1}"
    fi

done



if ! test -e "${1-}"; then
    err 'Need a file listing dependencies'
fi

depfile="${1}"
name="${depfile##*/}"



if test "${2-}"; then
    err 'Sorry, one file at once please.'
fi



# Read dependencies from file

# read file, cleanup comments and acceptable whitespace
mapfile -t depends < <(
    sed -E 's/^\s+//; /^#/d; s/\s+$//; /^$/d' "${depfile}" | sort -u
)

# terminate if nothing is listed
if test "${#depends[@]}" -lt 1; then
    err 'No dependencies listed in file'
fi

# construct regular expression for package descriptions
rePkgName='([a-z0-9@_+][a-z0-9@._+-]*)'
reVersion='([0-9]+(:[0-9]+)?(\.[0-9]+)*[a-z_]*)'
reConstraint="(=${reVersion}|(>=?${reVersion})?(<=?${reVersion})?)"
reLine="${rePkgName}${reConstraint}?"

# Complain about lines not matching $reLine, limit to 10
if
    grep -Evx "${reLine}" <( printf '%s\n' "${depends[@]}") \
        | head -n10 >&2
then
    err 'Invalid input.'
fi

# print listing in debug mode
if "${debug}"; then
    info 'List of dependencies'
    printf "%s\n" "${depends[@]}"
fi



# Creating package contents

version="$(date '+%Y%m%d%H%M%S' -d@"$(stat -c%Y "${depfile}")")"
release=1
packager="$(stat "${depfile}" -c '%U:%G')"
url="file://$(realpath "${depfile}")"

tmp="$(mktemp -t -d metapkg.XXXXXXXX)"
pkg="${tmp}/metapkg_${name}-${version}-${release}-any.pkg"
mkdir "${pkg}"

if "${debug}"; then
    info "Creating package contents"
    echo "${pkg}"
fi


### Package construction

# .PKGINFO
{

    cat <<.
pkgname = metapkg_${name}
pkgbase = metapkg_${name}
xdata = pkgtype=pkg
pkgver = ${version}-${release}
pkgdesc = Dependencies for: ${name}
url = ${url}
builddate = ${release}
packager = ${packager}
size = 0
arch = any
.

    # FIXME quoting rules in that file?
    printf 'depend = %s\n' "${depends[@]}"

} >"${pkg}/.PKGINFO"

if "${debug}"; then
    info .PKGINFO
    cat "${pkg}/.PKGINFO"
fi


# . MTREE

LANG=C bsdtar -C "${pkg}" -c --format=mtree --owner 0 --group 0 \
    .PKGINFO \
    | gzip -c -f -n > "${pkg}/.MTREE"

if "${debug}"; then
    info .MTREE
    gunzip < "${pkg}/.MTREE"
    info 'Package directory content'
    ls -lA "${pkg}"
fi


# Archive package

LANG=C bsdtar -C "${pkg}" -c --owner 0 --group 0 --no-fflags --no-read-sparse \
    .MTREE .PKGINFO \
    | zstd > "${pkg}.tar.zst"

if "${debug}"; then
    info 'pkg archive content'
    unzstd < "${pkg}.tar.zst" | bsdtar -tvf -
fi



info "Installing $(basename "${pkg}")"

mapfile -t orphansPre < <(pacman -Qdtq)

if "${debug}" && test "${#orphansPre[@]}" -gt 0; then
    info "Found ${#orphansPre[@]} orphans on your system."
fi

if test "${EUID}" -ne 0; then
    warn 'Not running as root, only print targets.'
    pacman -Up "${pkg}.tar.zst"
elif "${debug}"; then
    pacman -U "${pkg}.tar.zst"
else
    pacman --noconfirm -U "${pkg}.tar.zst"
fi || warn "Pacman exit code $?"



# Look for newly introduced (not: all) orphans

mapfile -t orphansNew < <(
    comm -13 <(printf '%s\n' "${orphansPre[@]}") <(pacman -Qdtq)
)

if test "${#orphansNew[@]}" -gt 0; then
    warn 'This change newly orphaned one or more packages'
    pacman -Rs "${orphansNew[@]}" || warn "Pacman exit code $?"
fi


# remove temporary directory
if "${debug}"; then
    warn "Keeping: ${tmp}"
else
    rm -rf "${tmp}"
fi


info 'Done'
cat <<.
To update metapackage:    metapkg ${1}
To uninstall metapackage: pacman -Rs metapkg_${name}
.


